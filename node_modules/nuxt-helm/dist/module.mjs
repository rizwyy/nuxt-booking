import { resolve } from 'path';
import { fileURLToPath } from 'url';
import { defineNuxtModule, addServerHandler } from '@nuxt/kit';

function isObject(val) {
  return val !== null && typeof val === "object";
}
function _defu(baseObj, defaults, namespace = ".", merger) {
  if (!isObject(defaults)) {
    return _defu(baseObj, {}, namespace, merger);
  }
  const obj = Object.assign({}, defaults);
  for (const key in baseObj) {
    if (key === "__proto__" || key === "constructor") {
      continue;
    }
    const val = baseObj[key];
    if (val === null || val === void 0) {
      continue;
    }
    if (merger && merger(obj, key, val, namespace)) {
      continue;
    }
    if (Array.isArray(val) && Array.isArray(obj[key])) {
      obj[key] = val.concat(obj[key]);
    } else if (isObject(val) && isObject(obj[key])) {
      obj[key] = _defu(val, obj[key], (namespace ? `${namespace}.` : "") + key.toString(), merger);
    } else {
      obj[key] = val;
    }
  }
  return obj;
}
function createDefu(merger) {
  return (...args) => args.reduce((p, c) => _defu(p, c, "", merger), {});
}
const defu = createDefu();

const module = defineNuxtModule({
  meta: {
    name: "nuxt-helm",
    configKey: "helm"
  },
  defaults: {
    crossOriginResourcePolicy: "same-origin",
    crossOriginOpenerPolicy: "same-origin",
    crossOriginEmbedderPolicy: "require-corp",
    contentSecurityPolicy: "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests",
    originAgentCluster: "?1",
    referrerPolicy: "no-referrer",
    strictTransportSecurity: "max-age=15552000; includeSubDomains",
    xContentTypeOptions: "nosniff",
    xDNSPrefetchControl: "off",
    xDownloadOptions: "noopen",
    xFrameOptions: "SAMEORIGIN",
    xPermittedCrossDomainPolicies: "none",
    xXSSProtection: 0
  },
  setup(options, nuxt) {
    const runtimeDir = fileURLToPath(new URL("./runtime", import.meta.url));
    nuxt.options.build.transpile.push(runtimeDir);
    nuxt.options.runtimeConfig.helm = defu(nuxt.options.runtimeConfig.helm, {
      ...options
    });
    for (const header in nuxt.options.runtimeConfig.helm) {
      if (nuxt.options.runtimeConfig.helm[header]) {
        addServerHandler({ route: "", handler: resolve(runtimeDir, `server/middleware/${header}`) });
      }
    }
  }
});

export { module as default };
